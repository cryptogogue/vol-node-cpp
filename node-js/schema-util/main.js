/* eslint-disable no-whitespace-before-property */

import fs                       from 'fs';
import { buildSchema, op }      from '../wallet/src/Schema/SchemaBuilder';
import { JUSTIFY }              from '../wallet/src/util/textLayout';
import * as util                from './util'

//     //----------------------------------------------------------------//
//     .definition ( 'pack' )
//         .field ( 'layout', 'pack' )
//         .field ( 'displayName', 'Pack' )
//             .alternate ( 'ES', 'El Pack' )
//             .alternate ( 'FR', 'Le Pack' )

//     .definition ( 'common' )
//         .field ( 'layout', 'card' )
//         .field ( 'displayName', 'Common' )
//             .alternate ( 'ES', 'El Common' )
//             .alternate ( 'FR', 'Le Common' )
//         .field ( 'image', 'https://i.imgur.com/VMPKVAN.jpg' )
//         .field ( 'keywords', 'card common' )

//     .definition ( 'rare' )
//         .field ( 'layout', 'card' )
//         .field ( 'displayName', 'Rare' )
//             .alternate ( 'ES', 'El Rare' )
//             .alternate ( 'FR', 'Le Rare' )
//         .field ( 'image', 'https://i.imgur.com/BtKggd4.jpg' )
//         .field ( 'keywords', 'card rare' )

//     .definition ( 'ultraRare' )
//         .field ( 'layout', 'card' )
//         .field ( 'displayName', 'Ultra-Rare' )
//             .alternate ( 'ES', 'El Ultra-Rare' )
//             .alternate ( 'FR', 'Le Ultra-Rare' )
//         .field ( 'image', 'https://i.imgur.com/2aiJ3cq.jpg' )
//         .field ( 'keywords', 'card ultra-rare' )

//     //----------------------------------------------------------------//
//     .method ( 'makeRare', 'Combine two commons to make a rare.' )
//         .assetArg ( 'common0', op.ASSET_TYPE ( 'common' ))
//         .assetArg ( 'common1', op.ASSET_TYPE ( 'common' ))
//         .luaFile ( 'lua/makeRare.lua' )

//     .method ( 'makeUltraRare', 'Combine two rares to make an ultra-rare.' )
//         .assetArg ( 'rare0', op.ASSET_TYPE ( 'rare' ))
//         .assetArg ( 'rare1', op.ASSET_TYPE ( 'rare' ))
//         .luaFile ( 'lua/makeUltraRare.lua' )

//     .method ( 'openPack', 'Open a booster pack.' )
//         .assetArg ( 'pack', op.ASSET_TYPE ( 'pack' ))
//         .luaFile ( 'lua/openPack.lua' )
//     ;

//================================================================//
// schema
//================================================================//
let schemaBuilder = buildSchema ( 'TEST_SCHEMA' )
    .luaFile ( 'lua/publish.lua' )

    //----------------------------------------------------------------//
    .font ( 'roboto', 'http://localhost:3000/fonts/roboto/roboto-regular.ttf' )
        .bold ( 'http://localhost:3000/fonts/roboto/roboto-bold.ttf' )
        .italic ( 'http://localhost:3000/fonts/roboto/roboto-regularitalic.ttf' )
        .boldItalic ( 'http://localhost:3000/fonts/roboto/roboto-bolditalic.ttf' )

    //----------------------------------------------------------------//
    .icon ( 'circle', 256, 256,
        `<circle cx = '128' cy = '128' r = '128'/>`
    )

    //----------------------------------------------------------------//
    .icon ( 'triangle', 1, 1,
        `<polygon points = '0,1 1,1 0.5,0'/>`
    )

    //----------------------------------------------------------------//
    .icon ( 'action', 612, 792,
        `<path d="M211.451,176.663c19.478-12.986,40.254-20.777,62.33-25.971v-32.463c0-7.792,6.492-14.284,14.284-14.284h38.956
        c7.791,0,14.284,6.492,14.284,14.284v32.463c22.074,3.895,42.85,12.985,62.329,25.971l23.373-22.076
        c5.195-5.194,14.285-5.194,19.477,0l27.271,27.269c5.191,5.195,5.191,14.284,0,19.479l-24.673,23.374
        c12.985,19.477,20.777,40.254,25.97,62.329h32.464c7.792,0,14.283,6.492,14.283,14.284v38.956c0,7.791-6.491,14.284-14.283,14.284
        h-32.464c-3.896,22.074-12.984,42.851-25.97,62.329l22.074,23.374c5.194,5.192,5.194,14.284,0,19.479l-27.269,27.27
        c-5.194,5.191-14.284,5.191-19.477,0l-23.376-24.674c-19.477,12.985-40.254,20.778-62.329,25.97v32.465
        c0,7.792-6.491,14.283-14.281,14.283h-38.958c-7.791,0-14.284-6.491-14.284-14.283v-32.465
        c-22.075-3.895-42.851-12.984-62.33-25.97l-23.374,22.075c-5.193,5.194-14.284,5.194-19.478,0l-27.269-27.269
        c-5.195-5.194-5.195-14.284,0-19.479l23.373-22.074c-12.984-19.479-20.776-40.255-25.97-62.33h-32.464
        c-7.791,0-14.284-6.493-14.284-14.283v-38.957c0-7.791,6.493-14.283,14.284-14.283h32.464c3.895-22.075,12.986-42.851,25.97-62.33
        l-22.075-23.373c-5.194-5.195-5.194-14.285,0-19.479l27.27-27.269c5.193-5.195,14.283-5.195,19.477,0L211.451,176.663z
         M236.558,248.861c-38.58,38.58-38.58,101.592-1.287,140.17c38.58,38.58,101.591,38.58,140.171,1.287
        c38.579-38.58,38.579-101.592,1.286-140.17C338.149,211.568,275.137,210.283,236.558,248.861z M361.983,202.665
        c-1.623,0-2.435,0-4.057,0h-12.981v-64.097c0-24.341,20.283-44.624,44.625-44.624h13.793c4.057-14.605,17.038-25.964,33.266-25.964
        c18.661,0,34.077,15.417,34.077,34.077c0,18.662-15.416,34.077-34.077,34.077c-16.228,0-29.209-11.359-33.266-25.963H389.57
        c-15.416,0-28.397,12.982-28.397,28.397v64.097H361.983z M419.59,101.245c0,9.736,8.113,17.85,17.85,17.85
        c9.737,0,17.851-8.114,17.851-17.85c0-9.737-8.113-17.85-17.851-17.85C427.703,83.396,419.59,91.508,419.59,101.245z
         M266.244,137.756v64.097h-10.547c-1.623,0-4.057,0-5.68,0.812v-64.908c0-15.416-12.981-28.397-28.397-28.397h-13.793
        c-4.056,14.604-17.038,25.963-33.266,25.963c-18.661,0-34.077-15.416-34.077-34.077s15.416-34.077,34.077-34.077
        c16.228,0,29.209,11.359,33.266,25.963h13.793C245.959,93.131,266.244,113.415,266.244,137.756z M192.41,101.245
        c0-9.737-8.113-17.85-17.85-17.85c-9.736,0-17.85,8.113-17.85,17.85c0,9.736,8.114,17.85,17.85,17.85
        C184.297,119.095,192.41,110.981,192.41,101.245z M253.262,437.147h12.981v64.097c0,24.341-20.284,44.625-44.625,44.625h-13.793
        c-4.056,14.604-17.038,25.963-33.266,25.963c-18.661,0-34.077-15.416-34.077-34.077s15.416-34.077,34.077-34.077
        c16.228,0,29.209,11.359,33.266,25.964h13.793c15.416,0,28.397-12.982,28.397-28.397v-64.909
        C250.828,437.147,252.45,437.147,253.262,437.147z M192.41,537.755c0-9.736-8.113-17.85-17.85-17.85
        c-9.736,0-17.85,8.113-17.85,17.85s8.114,17.85,17.85,17.85C184.297,555.604,192.41,547.491,192.41,537.755z M471.517,537.755
        c0,18.661-15.416,34.077-34.077,34.077c-16.227,0-29.208-11.359-33.266-25.963h-13.792c-24.341,0-44.625-20.284-44.625-44.625
        v-64.097h10.548c1.622,0,4.056,0,5.68-0.813v64.909c0,15.415,12.98,28.397,28.397,28.397h13.792
        c4.058-14.604,17.039-25.964,33.266-25.964C456.101,503.678,471.517,518.283,471.517,537.755z M455.29,537.755
        c0-9.736-8.113-17.85-17.851-17.85c-9.736,0-17.85,8.113-17.85,17.85s8.113,17.85,17.85,17.85
        C447.177,555.604,455.29,547.491,455.29,537.755z M188.353,279.744h-64.097c-24.341,0-44.625-20.284-44.625-44.625v-13.793
        c-14.604-4.057-25.963-17.039-25.963-33.266c0-18.661,15.416-34.077,34.077-34.077c18.661,0,34.077,15.416,34.077,34.077
        c0,16.228-11.359,29.209-25.963,33.266v13.793c0,15.416,12.981,28.397,28.397,28.397h64.908c0,1.623,0,2.434,0,4.057v12.17H188.353
        z M105.595,188.06c0-9.736-8.114-17.85-17.85-17.85c-9.737,0-17.85,8.113-17.85,17.85c0,9.737,8.113,17.85,17.85,17.85
        C97.481,205.91,105.595,197.797,105.595,188.06z M95.859,403.881v13.793c14.604,4.058,25.963,17.039,25.963,33.266
        c0,18.661-15.416,34.077-34.077,34.077s-34.077-15.416-34.077-34.077c0-16.227,11.359-29.208,25.963-33.265v-13.794
        c0-24.34,20.284-44.624,44.625-44.624h64.097v10.547c0,1.623,0,4.057,0.811,5.68h-64.908
        C108.84,375.484,95.859,388.465,95.859,403.881z M87.745,433.09c-9.737,0-17.85,8.113-17.85,17.85
        c0,9.737,8.113,17.851,17.85,17.851c9.736,0,17.85-8.113,17.85-17.851C105.595,441.203,97.481,433.09,87.745,433.09z
         M558.332,450.939c0,18.661-15.416,34.077-34.077,34.077s-34.077-15.416-34.077-34.077c0-16.227,11.359-29.208,25.964-33.266
        v-13.793c0-15.416-12.982-28.397-28.397-28.397h-64.909c0-1.623,0-2.434,0-4.057v-12.981h64.097
        c24.342,0,44.625,20.283,44.625,44.625v13.792C546.973,420.92,558.332,434.713,558.332,450.939z M542.104,450.939
        c0-9.736-8.113-17.85-17.85-17.85s-17.85,8.113-17.85,17.85c0,9.737,8.113,17.851,17.85,17.851S542.104,460.677,542.104,450.939z
         M558.332,188.06c0,16.228-11.359,29.209-25.963,33.266v13.793c0,24.34-20.284,44.625-44.625,44.625h-64.097v-10.547
        c0-1.623,0-4.057-0.813-5.68h64.909c15.415,0,28.397-12.982,28.397-28.397v-13.793c-14.604-4.057-25.964-17.039-25.964-33.266
        c0-18.661,15.416-34.077,34.077-34.077S558.332,169.399,558.332,188.06z M542.104,188.06c0-9.736-8.113-17.85-17.85-17.85
        s-17.85,8.113-17.85,17.85c0,9.737,8.113,17.85,17.85,17.85S542.104,197.797,542.104,188.06z"/>`
    )

    //----------------------------------------------------------------//
    .layout ( 'dude', 750, 1050, 300, '<g>{{ $$ }}</g>' ) // the last param is an optional SVG wrapper (for transforms)

        .drawSVG (`
            <rect x='0' y='0' width='750' height='1050' fill='#000000'/>
            <rect x='37.5' y='37.5' width='675' height='975' fill='#ffffff'/>
            <rect x='37.5' y='168.75' width='675' height='412.5' fill='#ff0000'/>
            <rect x='37.5' y='900' width='675' height='112.5' fill='#ff0000'/>

            <rect x='48.875' y='37.5' width='534.375' height='56.25' fill='none' stroke='gray'/>
            <rect x='48.875' y='93.75' width='534.375' height='37.5' fill='none' stroke='gray'/>
            <rect x='48.875' y='131.25' width='534.375' height='37.5' fill='none' stroke='gray'/>

            <rect x='48.875' y='592.625' width='652.25' height='296' fill='none' stroke='gray'/>

            <image x='37.5' y='168.75' width='675' height='412.5' xlink:href='{{ image }}'/>
        `)
        // card name
        .drawTextBox ( 48.875, 37.5, 534.375, 56.25, JUSTIFY.VERTICAL.CENTER )
            .drawText ( '{{ name }}', 'roboto', 40, JUSTIFY.HORIZONTAL.LEFT )

        // card type
        .drawTextBox ( 48.875, 93.75, 534.375, 37.5, JUSTIFY.VERTICAL.CENTER )
            .drawText ( '{{ type }}{{ subType }}', 'roboto', 30, JUSTIFY.HORIZONTAL.LEFT )

        // access
        .drawTextBox ( 48.875, 131.25, 534.375, 37.5, JUSTIFY.VERTICAL.CENTER )
            .drawText ( '{{ access }}', 'roboto', 30, JUSTIFY.HORIZONTAL.LEFT )

        // rules
        .drawTextBox ( 48.875, 592.625, 652.25, 296, JUSTIFY.VERTICAL.TOP  )
            .drawText ( '{{ rules }}', 'roboto', 40, JUSTIFY.HORIZONTAL.LEFT )

        // the 'wrapSVG' command can be used on drawTextBox and drawBarcode to wrap the command output
        //    .wrapSVG ( '<g transform = "translate ( 48.875 592.625 ) rotate ( 45 )">{{ $$ }}</g>' )

        // default barcode is PDF417
        //.drawBarcode ( '{{ $ }}', 37.5, 900, 675, 112.5 )
        
        // same as default, but explicit (better, clearer)
        // .drawBarcodePDF417 ( '{{ $ }}', 37.5, 900, 675, 112.5 )

        // QR code also supported
        // defaults to 'L' and 0 (autoselect type)
        // or specificy one of 'L', 'M', 'Q', 'H' and 0 (autoselect) or types 1-40
        .drawBarcodeQR ( '{{ $ }}', 600, 900, 112.5 )

    //----------------------------------------------------------------//
    .layout ( 'overlay', 750, 1050, 300 )

        .drawSVG (`
            <circle cx='375' cy='525' r='372' stroke='#00ffff' stroke-width='20' fill='none'/>
        `)

    //----------------------------------------------------------------//
    .layout ( 'dude-overlay', 750, 1050, 300 )

        .drawLayout ( 'dude' )
        .drawLayout ( 'overlay' )

const schema = util.parseVolitionXLSX ( schemaBuilder );

util.writeJavascript ( schema, 'schema.js' );
util.writeJSON ( schema, 'schema.json' );
util.writeTransaction ( schema, 'publish-schema-transaction.json' );
